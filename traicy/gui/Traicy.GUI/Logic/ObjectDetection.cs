using System;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;

namespace Traicy.GUI.Logic
{
	/// <summary>
	/// Class that handles the object detection.
	/// </summary>
	class ObjectDetection
	{
		/// <summary>
		/// Invokes the object detection based on the Python script path and its arguments by starting a new process.
		/// The process uses the PythonInterpreterPath from the settings. 
		/// The Windows cmd isn't used and all errors and warnings are redirected to the standard output and logged for evaluation.
		/// The method waits for the process to finish and returns the result.
		/// </summary>
		/// <param name="args">Additional (console) arguments that are passed to the process.</param>
		/// <returns>Returns a result string which contains the prediction.</returns>
		public string InvokeObjectDetection(string args)
		{
			var processStartInfo = InitProcessStartInfo(Properties.Resources.PythonScriptPath, args);

			try
			{
				using (Process process = Process.Start(processStartInfo))
				{
					if (process != null)
					{
						process.WaitForExit();
						using (StreamReader reader = process.StandardOutput)
						{
							string stderr = process.StandardError.ReadToEnd(); // exceptions / errors from Python script
							Logger.Log(stderr);
							string result = reader.ReadToEnd(); // result with prediction
							return result;
						}
					}
				}
			}
			catch (Win32Exception e)
			{
				Logger.Log(e.Message);
			}
			catch (Exception e)
			{
				Logger.Log(e.Message);
			}

			return string.Empty;
		}

		/// <summary>
		/// Initializes the ProcessStartInfo that is used for the object detection process by setting the command as script to execute 
		/// and the arguments as additional information for the python script to process.
		/// </summary>
		/// <param name="command">The python script that is executed as own process.</param>
		/// <param name="args">Additional (console) arguments that are passed to the process.</param>
		/// <returns>ProcessStartInfo that is used when starting the process.</returns>
		private ProcessStartInfo InitProcessStartInfo(string command, string args)
		{
            var tfModelMode = new SettingsController().GetTfModelMode();

			ProcessStartInfo processStartInfo = new ProcessStartInfo
			{
				FileName = new SettingsController().GetPythonInterpreterPath(), //custom path from settings file
				Arguments = $"\"{command}\" \"{args}\" \"{tfModelMode}\"", //arguments (image path and tfmodelmode)
				UseShellExecute = false, // don't use windows cmd
				CreateNoWindow = true,
				RedirectStandardOutput = true, // Any output, generated by application will be redirected back
				RedirectStandardError = true // Any error in standard output will be redirected back (for example exceptions)
			};
			return processStartInfo;
		}
	}
}
